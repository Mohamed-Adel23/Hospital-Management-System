// <auto-generated />
using System;
using HMSproject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HMSproject.Migrations
{
    [DbContext(typeof(HmsContext))]
    [Migration("20230428210527_merge")]
    partial class merge
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HMSproject.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("FkDept")
                        .HasColumnType("int")
                        .HasColumnName("fk_dept");

                    b.Property<int?>("FkPat")
                        .HasColumnType("int")
                        .HasColumnName("fk_pat");

                    b.Property<int?>("FkPay")
                        .HasColumnType("int")
                        .HasColumnName("fk_pay");

                    b.Property<int?>("FkStat")
                        .HasColumnType("int")
                        .HasColumnName("fk_stat");

                    b.Property<int?>("FkTt")
                        .HasColumnType("int")
                        .HasColumnName("fk_tt");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("PK__appointm__3213E83F583B8BB7");

                    b.HasIndex("FkDept");

                    b.HasIndex("FkPay");

                    b.HasIndex("FkStat");

                    b.HasIndex("FkTt");

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("HMSproject.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AppPrice")
                        .HasColumnType("int")
                        .HasColumnName("app_price");

                    b.Property<int?>("DrNumber")
                        .HasColumnType("int")
                        .HasColumnName("dr_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("NsNumber")
                        .HasColumnType("int")
                        .HasColumnName("ns_number");

                    b.HasKey("Id")
                        .HasName("PK__departme__3213E83F4A38BA18");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("HMSproject.Models.Diagnose", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Analysis")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("analysis");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<int?>("FkApp")
                        .HasColumnType("int")
                        .HasColumnName("fk_app");

                    b.Property<string>("Prescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("prescription");

                    b.HasKey("Id")
                        .HasName("PK__diagnose__3213E83F034E5810");

                    b.HasIndex("FkApp");

                    b.ToTable("diagnose", (string)null);
                });

            modelBuilder.Entity("HMSproject.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<int>("Experience")
                        .HasColumnType("int")
                        .HasColumnName("experience");

                    b.Property<int?>("FkDept")
                        .HasColumnType("int")
                        .HasColumnName("fk_dept");

                    b.Property<int?>("FkStatus")
                        .HasColumnType("int")
                        .HasColumnName("fk_status");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("gender");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("PersonalProfile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("personal_profile");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .HasColumnName("phone")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK__doctors__3213E83FF5D3A2AD");

                    b.HasIndex("FkDept");

                    b.HasIndex("FkStatus");

                    b.ToTable("doctors", (string)null);
                });

            modelBuilder.Entity("HMSproject.Models.Lab", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AnaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ana_name");

                    b.Property<int>("Cost")
                        .HasColumnType("int")
                        .HasColumnName("cost");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("FkApp")
                        .HasColumnType("int")
                        .HasColumnName("fk_app");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("result")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK__lab__3213E83F69B175CD");

                    b.HasIndex("FkApp");

                    b.ToTable("lab", (string)null);
                });

            modelBuilder.Entity("HMSproject.Models.Medicine", b =>
                {
                    b.Property<int?>("FkDia")
                        .HasColumnType("int")
                        .HasColumnName("fk_dia");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasIndex("FkDia");

                    b.ToTable("medicine", (string)null);
                });

            modelBuilder.Entity("HMSproject.Models.Nurse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<int?>("FkDept")
                        .HasColumnType("int")
                        .HasColumnName("fk_dept");

                    b.Property<int?>("FkStatus")
                        .HasColumnType("int")
                        .HasColumnName("fk_status");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("gender");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .HasColumnName("phone")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK__nurses__3213E83FC177C7F6");

                    b.HasIndex("FkDept");

                    b.HasIndex("FkStatus");

                    b.ToTable("nurses", (string)null);
                });

            modelBuilder.Entity("HMSproject.Models.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<long>("SSN")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte[]>("profilePic")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HMSproject.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("method");

                    b.HasKey("Id")
                        .HasName("PK__payment__3213E83F6CFAD05C");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("HMSproject.Models.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<int?>("Cost")
                        .HasColumnType("int")
                        .HasColumnName("cost");

                    b.Property<string>("MedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("med_name");

                    b.HasKey("Id")
                        .HasName("PK__pharmacy__3213E83F6DF9A50D");

                    b.ToTable("pharmacy", (string)null);
                });

            modelBuilder.Entity("HMSproject.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__status__3213E83F3CFFDB1B");

                    b.ToTable("status", (string)null);
                });

            modelBuilder.Entity("HMSproject.Models.Timetable", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AppNum")
                        .HasColumnType("int")
                        .HasColumnName("app_num");

                    b.Property<int>("AvailableDrNum")
                        .HasColumnType("int")
                        .HasColumnName("available_dr_num");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("day_name");

                    b.Property<int?>("FkDept")
                        .HasColumnType("int")
                        .HasColumnName("fk_dept");

                    b.HasKey("Id")
                        .HasName("PK__timetabl__3213E83FA95CDF12");

                    b.HasIndex("FkDept");

                    b.ToTable("timetable", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HMSproject.Models.Appointment", b =>
                {
                    b.HasOne("HMSproject.Models.Department", "FkDeptNavigation")
                        .WithMany("Appointments")
                        .HasForeignKey("FkDept")
                        .HasConstraintName("FK__appointme__fk_de__4CA06362");

                    b.HasOne("HMSproject.Models.Payment", "FkPayNavigation")
                        .WithMany("Appointments")
                        .HasForeignKey("FkPay")
                        .HasConstraintName("FK__appointme__fk_pa__4BAC3F29");

                    b.HasOne("HMSproject.Models.Status", "FkStatNavigation")
                        .WithMany("Appointments")
                        .HasForeignKey("FkStat")
                        .HasConstraintName("FK__appointme__fk_st__4E88ABD4");

                    b.HasOne("HMSproject.Models.Timetable", "FkTtNavigation")
                        .WithMany("Appointments")
                        .HasForeignKey("FkTt")
                        .HasConstraintName("FK__appointme__fk_tt__4D94879B");

                    b.Navigation("FkDeptNavigation");

                    b.Navigation("FkPayNavigation");

                    b.Navigation("FkStatNavigation");

                    b.Navigation("FkTtNavigation");
                });

            modelBuilder.Entity("HMSproject.Models.Diagnose", b =>
                {
                    b.HasOne("HMSproject.Models.Appointment", "FkAppNavigation")
                        .WithMany("Diagnoses")
                        .HasForeignKey("FkApp")
                        .HasConstraintName("FK__diagnose__fk_app__5441852A");

                    b.Navigation("FkAppNavigation");
                });

            modelBuilder.Entity("HMSproject.Models.Doctor", b =>
                {
                    b.HasOne("HMSproject.Models.Department", "FkDeptNavigation")
                        .WithMany("Doctors")
                        .HasForeignKey("FkDept")
                        .HasConstraintName("FK__doctors__fk_dept__5070F446");

                    b.HasOne("HMSproject.Models.Status", "FkStatusNavigation")
                        .WithMany("Doctors")
                        .HasForeignKey("FkStatus")
                        .HasConstraintName("FK__doctors__fk_stat__5165187F");

                    b.Navigation("FkDeptNavigation");

                    b.Navigation("FkStatusNavigation");
                });

            modelBuilder.Entity("HMSproject.Models.Lab", b =>
                {
                    b.HasOne("HMSproject.Models.Appointment", "FkAppNavigation")
                        .WithMany("Labs")
                        .HasForeignKey("FkApp")
                        .HasConstraintName("FK__lab__fk_app__5629CD9C");

                    b.Navigation("FkAppNavigation");
                });

            modelBuilder.Entity("HMSproject.Models.Medicine", b =>
                {
                    b.HasOne("HMSproject.Models.Diagnose", "FkDiaNavigation")
                        .WithMany()
                        .HasForeignKey("FkDia")
                        .HasConstraintName("FK__medicine__fk_dia__5535A963");

                    b.Navigation("FkDiaNavigation");
                });

            modelBuilder.Entity("HMSproject.Models.Nurse", b =>
                {
                    b.HasOne("HMSproject.Models.Department", "FkDeptNavigation")
                        .WithMany("Nurses")
                        .HasForeignKey("FkDept")
                        .HasConstraintName("FK__nurses__fk_dept__52593CB8");

                    b.HasOne("HMSproject.Models.Status", "FkStatusNavigation")
                        .WithMany("Nurses")
                        .HasForeignKey("FkStatus")
                        .HasConstraintName("FK__nurses__fk_statu__534D60F1");

                    b.Navigation("FkDeptNavigation");

                    b.Navigation("FkStatusNavigation");
                });

            modelBuilder.Entity("HMSproject.Models.Timetable", b =>
                {
                    b.HasOne("HMSproject.Models.Department", "FkDeptNavigation")
                        .WithMany("Timetables")
                        .HasForeignKey("FkDept")
                        .HasConstraintName("FK__timetable__fk_de__4F7CD00D");

                    b.Navigation("FkDeptNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HMSproject.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HMSproject.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSproject.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HMSproject.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HMSproject.Models.Appointment", b =>
                {
                    b.Navigation("Diagnoses");

                    b.Navigation("Labs");
                });

            modelBuilder.Entity("HMSproject.Models.Department", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Doctors");

                    b.Navigation("Nurses");

                    b.Navigation("Timetables");
                });

            modelBuilder.Entity("HMSproject.Models.Payment", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HMSproject.Models.Status", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Doctors");

                    b.Navigation("Nurses");
                });

            modelBuilder.Entity("HMSproject.Models.Timetable", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
